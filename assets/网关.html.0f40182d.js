import{_ as t}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as i,c as o,a as e,b as n,d as l,e as s,r}from"./app.59944050.js";const c={},d=s(`<h1 id="网关" tabindex="-1"><a class="header-anchor" href="#网关" aria-hidden="true">#</a> 网关</h1><h2 id="一、高德渲染网关go语言改造" tabindex="-1"><a class="header-anchor" href="#一、高德渲染网关go语言改造" aria-hidden="true">#</a> 一、高德渲染网关Go语言改造</h2><h4 id="_1-1-知识点记录" tabindex="-1"><a class="header-anchor" href="#_1-1-知识点记录" aria-hidden="true">#</a> 1.1 知识点记录</h4><ol><li><p>流量对比。通过二进制级对比，排除字符集差异，不同语言库函数差异</p></li><li><p>仿真环境压测。【混沌工具】</p></li><li><p>平滑灰度切换。<strong>可灰度</strong>、<strong>可监控</strong>、<strong>可回滚</strong></p></li><li><p>流量复制</p><ol><li>工具：tcpdump。</li><li>流量解析。 <ol><li>读取tcp payload。</li><li>还原成http请求</li></ol></li></ol></li><li><p>tcpdump抓包。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>tcpdump <span class="token parameter variable">-i</span> eth0 <span class="token parameter variable">-w</span> test.pcap
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li></ol><h4 id="_1-3-参考资料" tabindex="-1"><a class="header-anchor" href="#_1-3-参考资料" aria-hidden="true">#</a> 1.3 参考资料</h4>`,5),p={href:"https://mp.weixin.qq.com/s/NH2jmvyzPcH_GOhn6YLMsQ",target:"_blank",rel:"noopener noreferrer"},h={href:"https://www.cnblogs.com/ct20150811/p/9431976.html",target:"_blank",rel:"noopener noreferrer"},u=s(`<h2 id="二、限流" tabindex="-1"><a class="header-anchor" href="#二、限流" aria-hidden="true">#</a> 二、限流</h2><h3 id="_2-1-常见的限流算法" tabindex="-1"><a class="header-anchor" href="#_2-1-常见的限流算法" aria-hidden="true">#</a> 2.1 常见的限流算法</h3><ol><li><p>固定窗口</p><blockquote><p>在<strong>固定时间窗口</strong>内对请求进行计数，与阀值进行比较判断是否需要限流，一旦到了时间临界点，将计数器清零</p></blockquote></li><li><p>滑动窗口</p><blockquote><p>将一个大的时间窗口分成多个小窗口，每次大窗口向后滑动一个小窗口，并保证大的窗口内流量不会超出最大值</p></blockquote></li><li><p>漏桶</p><blockquote><p>桶的容量是固定的。当有请求到来时先放到木桶中，处理请求的<code>worker</code>以固定的速度从木桶中取出请求进行相应</p></blockquote></li><li><p>令牌桶</p><blockquote><p><strong>令牌桶是反向的&quot;漏桶&quot;</strong>，它是以恒定的速度往木桶里加入令牌，木桶满了则不再加入令牌。服务收到请求时尝试从木桶中取出一个令牌，如果能够得到令牌则继续执行后续的业务逻辑。如果没有得到令牌，直接返回访问频率超限的错误码或页面等，不继续执行后续的业务逻辑。</p></blockquote></li></ol><h3 id="_2-2-官方限流器" tabindex="-1"><a class="header-anchor" href="#_2-2-官方限流器" aria-hidden="true">#</a> 2.2 官方限流器</h3><ol><li><p>内部结构</p><div class="language-go line-numbers-mode" data-ext="go"><pre class="language-go"><code><span class="token keyword">type</span> Limiter <span class="token keyword">struct</span> <span class="token punctuation">{</span>
 mu     sync<span class="token punctuation">.</span>Mutex
 limit  Limit
 burst  <span class="token builtin">int</span> <span class="token comment">// 令牌桶的大小</span>
 tokens <span class="token builtin">float64</span>
 last time<span class="token punctuation">.</span>Time <span class="token comment">// 上次更新tokens的时间</span>
 lastEvent time<span class="token punctuation">.</span>Time <span class="token comment">// 上次发生限速器事件的时间（通过或者限制都是限速器事件）</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>核心原理</p><p>通过计数的方式表示桶中剩余的令牌。每次消费取 Token 之前会先根据上次更新令牌数的时间差更新桶中Token数</p></li></ol><h3 id="_2-3-uber限流器" tabindex="-1"><a class="header-anchor" href="#_2-3-uber限流器" aria-hidden="true">#</a> 2.3 uber限流器</h3>`,6),m=e("li",null,[e("p",null,"uber-go/ratelimit")],-1),_=e("li",null,[e("p",null,"核心原理"),e("p",null,"漏桶算法实现")],-1),b=e("p",null,"源码",-1),k={href:"https://github.com/uber-go/ratelimit",target:"_blank",rel:"noopener noreferrer"},v=e("h3",{id:"_3-参考资料",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_3-参考资料","aria-hidden":"true"},"#"),n(" 3. 参考资料")],-1),g={href:"https://mp.weixin.qq.com/s/krrUFEHVBw4c-47ziXOK2w",target:"_blank",rel:"noopener noreferrer"};function f(x,q){const a=r("ExternalLinkIcon");return i(),o("div",null,[d,e("ol",null,[e("li",null,[e("a",p,[n("高德渲染网关Go语言重构实践"),l(a)])]),e("li",null,[e("a",h,[n("tcpdump抓包工具"),l(a)])])]),u,e("ol",null,[m,_,e("li",null,[b,e("p",null,[e("a",k,[n("uber-go/ratelimit"),l(a)])])])]),v,e("ol",null,[e("li",null,[e("a",g,[n("常用限流算法的应用场景和实现原理"),l(a)])])])])}const E=t(c,[["render",f],["__file","网关.html.vue"]]);export{E as default};
