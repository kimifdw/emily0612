import{_ as i}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as l,c as r,a as e,b as o,d as t,e as c,r as n}from"./app.59944050.js";const d="/image/os/deep-memory.jpg",h={},s=c('<h1 id="零拷贝技术" tabindex="-1"><a class="header-anchor" href="#零拷贝技术" aria-hidden="true">#</a> 零拷贝技术</h1><blockquote><p>磁盘相关的文件读写操作都有使用到<code>page cache</code>技术</p></blockquote><h2 id="四次拷贝与四次上下文切换" tabindex="-1"><a class="header-anchor" href="#四次拷贝与四次上下文切换" aria-hidden="true">#</a> 四次拷贝与四次上下文切换</h2><h3 id="总体流程" tabindex="-1"><a class="header-anchor" href="#总体流程" aria-hidden="true">#</a> 总体流程</h3><p><img src="'+d+'" alt="deep-memory.jpg"></p><ol><li>4次复制 <ol><li>CPU 负责将数据从磁盘搬运到内核空间的 Page Cache 中；</li><li>CPU 负责将数据从内核空间的 Socket 缓冲区搬运到的网络中；</li><li>CPU 负责将数据从内核空间的 Page Cache 搬运到用户空间的缓冲区；</li><li>CPU 负责将数据从用户空间的缓冲区搬运到内核空间的 Socket 缓冲区中；</li></ol></li><li>4次上下文切换 <ol><li>read 系统调用时：用户态切换到内核态；</li><li>read 系统调用完毕：内核态切换回用户态；</li><li>write 系统调用时：用户态切换到内核态；</li><li>write 系统调用完毕：内核态切换回用户态；</li></ol></li></ol><h3 id="dma技术" tabindex="-1"><a class="header-anchor" href="#dma技术" aria-hidden="true">#</a> DMA技术</h3><p>定义。在进行内存和 I/O 设备的数据传输的时候，我们不再通过 CPU 来控制数据传输，由DMA来进行控制</p><h3 id="零拷贝技术-1" tabindex="-1"><a class="header-anchor" href="#零拷贝技术-1" aria-hidden="true">#</a> 零拷贝技术</h3><ol><li>定义。计算机执行操作时，CPU 不需要先将数据从某处内存复制到另一个特定区域。</li><li>特点。不由CPU来全程负责内存中的数据写入其他组件，仅仅只负责管理</li><li>实现方式 <ol><li>sendfile。一次代替 read/write 系统调用，通过使用 DMA 技术以及传递文件描述符</li><li>mmap。仅代替 read 系统调用，将内核空间地址映射为用户空间地址，write 操作直接作用于内核空间</li><li>splice</li><li>直接Direct I/O。读写操作直接在磁盘上进行，不使用 <strong>page cache</strong> 机制，通常结合用户空间的用户缓存使用</li></ol></li></ol><h3 id="参考资料" tabindex="-1"><a class="header-anchor" href="#参考资料" aria-hidden="true">#</a> 参考资料</h3>',11),p={href:"https://mp.weixin.qq.com/s/9CAU6zg0F3CqLXJxpg1alA",target:"_blank",rel:"noopener noreferrer"};function _(m,f){const a=n("ExternalLinkIcon");return l(),r("div",null,[s,e("ol",null,[e("li",null,[e("a",p,[o("深入理解零拷贝技术"),t(a)])])])])}const g=i(h,[["render",_],["__file","零拷贝.html.vue"]]);export{g as default};
