import{_ as i}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as c,c as r,a,b as n,d as t,e,r as l}from"./app.59944050.js";const p="/image/shiro/ShiroAuthorizationSequence.png",u={},h=e('<h1 id="apache-shiro" tabindex="-1"><a class="header-anchor" href="#apache-shiro" aria-hidden="true">#</a> Apache Shiro</h1><h2 id="一、shiro架构" tabindex="-1"><a class="header-anchor" href="#一、shiro架构" aria-hidden="true">#</a> 一、shiro架构</h2><h3 id="_1-subject" tabindex="-1"><a class="header-anchor" href="#_1-subject" aria-hidden="true">#</a> 1. Subject</h3><blockquote><p>登录的当前用户。<code>Subject</code>绑定到<code>SecurityManager</code>，由<code>SecurityManager</code>进行统一管理。</p></blockquote><h3 id="_2-securitymanager" tabindex="-1"><a class="header-anchor" href="#_2-securitymanager" aria-hidden="true">#</a> 2. SecurityManager</h3><blockquote><p>管理所有登录用户对象</p></blockquote><p>2.1 shiro默认实现</p>',7),d=a("li",null,"Authentication",-1),k=a("li",null,"Authorization",-1),_=a("li",null,"Session Management",-1),m=a("li",null,"Cache Management",-1),b={href:"http://shiro.apache.org/realm.html",target:"_blank",rel:"noopener noreferrer"},g=a("li",null,"Event propagation",-1),f=a("li",null,"“Remember Me” Services",-1),v=a("li",null,"Subject creation",-1),x=a("li",null,"Logout and more.",-1),y=e('<h3 id="_3-realms-authenticator和authorizer" tabindex="-1"><a class="header-anchor" href="#_3-realms-authenticator和authorizer" aria-hidden="true">#</a> 3. Realms[Authenticator和Authorizer]</h3><blockquote><p>访问所有安全数据【包括角色、权限等】</p></blockquote><p>类似一个特定于安全的DAO，封装了数据源的连接细节，在需要时允许shiro使用这些数据，需要指定至少一个用于身份验证【<code>authentication</code>】或授权【<code>authorization</code>】的Realm，配置到SecurityManager</p><h4 id="_3-1-authenticator" tabindex="-1"><a class="header-anchor" href="#_3-1-authenticator" aria-hidden="true">#</a> 3.1 Authenticator</h4><blockquote><p>负责执行和响应用户身份验证(登录)尝试的组件，授权</p></blockquote><h5 id="_3-1-1-authentication-strategy【认证策略】" tabindex="-1"><a class="header-anchor" href="#_3-1-1-authentication-strategy【认证策略】" aria-hidden="true">#</a> 3.1.1 Authentication Strategy【认证策略】</h5><ul><li>无状态组件【身份验证时需要4次交互】 <ol><li>在调用任何Realms之前</li><li>在调用单个Realm的getAuthenticationInfo方法之前</li><li>在调用单个Realm的getAuthenticationInfo方法之后</li><li>在所有的Realms被调用之后</li></ol></li><li>自定义策略可继承<code>AbstractAuthenticationStrategy</code></li></ul><h5 id="_3-1-2-principals。登录账号标识属性【用户名、邮箱等】" tabindex="-1"><a class="header-anchor" href="#_3-1-2-principals。登录账号标识属性【用户名、邮箱等】" aria-hidden="true">#</a> 3.1.2 Principals。登录账号标识属性【用户名、邮箱等】</h5><h5 id="_3-1-3-credentials。登录账号密码" tabindex="-1"><a class="header-anchor" href="#_3-1-3-credentials。登录账号密码" aria-hidden="true">#</a> 3.1.3 Credentials。登录账号密码</h5><h5 id="_3-1-4-流程" tabindex="-1"><a class="header-anchor" href="#_3-1-4-流程" aria-hidden="true">#</a> 3.1.4 流程</h5>',10),A=["src"],S=e(`<ul><li><p>收集登录账号</p><p><code>UsernamePasswordToken token = new UsernamePasswordToken(username, password);</code></p></li><li><p>提交登录账号信息</p><p>通过用户的主体和凭证构建<code>AuthenticationToken</code>实例</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Subject</span> currentUser <span class="token operator">=</span> <span class="token class-name">SecurityUtils</span><span class="token punctuation">.</span><span class="token function">getSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
currentUser<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>ModularRealmAuthenticator</code>支持单个Realm</p></li><li><p>处理登录事件</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    currentUser<span class="token punctuation">.</span><span class="token function">login</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span> <span class="token class-name">UnknownAccountException</span> uae <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span> <span class="token class-name">IncorrectCredentialsException</span> ice <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span> <span class="token class-name">LockedAccountException</span> lae <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span> <span class="token class-name">ExcessiveAttemptsException</span> eae <span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">catch</span> your own <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span> <span class="token class-name">AuthenticationException</span> ae <span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//unexpected error?</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>退出登录事件【web应用在调用退出登录事件后，需跳转到新的页面来保证应用程序的安全性】</p><p><code>currentUser.logout()</code></p></li></ul><h5 id="_3-1-5-参考资料" tabindex="-1"><a class="header-anchor" href="#_3-1-5-参考资料" aria-hidden="true">#</a> 3.1.5 参考资料</h5>`,2),q={href:"http://shiro.apache.org/authentication.html",target:"_blank",rel:"noopener noreferrer"},w=e('<h4 id="_3-2-authorizer" tabindex="-1"><a class="header-anchor" href="#_3-2-authorizer" aria-hidden="true">#</a> 3.2 Authorizer</h4><blockquote><p>访问控制</p></blockquote><h5 id="_3-2-1-核心" tabindex="-1"><a class="header-anchor" href="#_3-2-1-核心" aria-hidden="true">#</a> 3.2.1 核心</h5><ol><li>角色</li><li>权限。资源和行为，权限只反应行为，不能指定谁可以这么做</li><li>用户</li></ol><h5 id="_3-2-2-流程" tabindex="-1"><a class="header-anchor" href="#_3-2-2-流程" aria-hidden="true">#</a> 3.2.2 流程</h5><p><img src="'+p+'" alt="Authorization"></p><h5 id="_3-2-3-参考资料" tabindex="-1"><a class="header-anchor" href="#_3-2-3-参考资料" aria-hidden="true">#</a> 3.2.3 参考资料</h5>',7),j={href:"http://shiro.apache.org/permissions.html",target:"_blank",rel:"noopener noreferrer"},E=e('<h3 id="_4-sessionmanager【会话管理】" tabindex="-1"><a class="header-anchor" href="#_4-sessionmanager【会话管理】" aria-hidden="true">#</a> 4. SessionManager【会话管理】</h3><blockquote><p>管理session的生命周期</p></blockquote><h4 id="_4-1-sessiondao" tabindex="-1"><a class="header-anchor" href="#_4-1-sessiondao" aria-hidden="true">#</a> 4.1 SessionDAO</h4><blockquote><p>提供对session的CRUD功能</p></blockquote><h4 id="_4-2-持久化" tabindex="-1"><a class="header-anchor" href="#_4-2-持久化" aria-hidden="true">#</a> 4.2 持久化</h4><ol><li><code>EnterpriseCacheSessionDAO</code>。</li></ol><h4 id="_4-3-参考资料" tabindex="-1"><a class="header-anchor" href="#_4-3-参考资料" aria-hidden="true">#</a> 4.3 参考资料</h4>',7),R={href:"http://shiro.apache.org/session-management.html",target:"_blank",rel:"noopener noreferrer"},z=e('<h3 id="_5-cachemanager【缓存管理】" tabindex="-1"><a class="header-anchor" href="#_5-cachemanager【缓存管理】" aria-hidden="true">#</a> 5. CacheManager【缓存管理】</h3><blockquote><p>为身份验证、角色权限、会话等提供缓存支持</p></blockquote><h3 id="_6-cryptography" tabindex="-1"><a class="header-anchor" href="#_6-cryptography" aria-hidden="true">#</a> 6.Cryptography</h3><blockquote><p>用于对密码进行编解码处理</p></blockquote><h2 id="四、资料整理" tabindex="-1"><a class="header-anchor" href="#四、资料整理" aria-hidden="true">#</a> 四、资料整理</h2>',5),M={href:"http://shiro.apache.org/architecture.html",target:"_blank",rel:"noopener noreferrer"};function U(o,C){const s=l("ExternalLinkIcon");return c(),r("div",null,[h,a("ul",null,[d,k,_,m,a("li",null,[a("a",b,[n("Realm"),t(s)]),n(" coordination")]),g,f,v,x]),y,a("img",{src:o.$withBase("/image/shiro/ShiroAuthenticationSequence.png")},null,8,A),S,a("ol",null,[a("li",null,[a("a",q,[n("authentication"),t(s)])])]),w,a("ol",null,[a("li",null,[a("a",j,[n("permissions"),t(s)])])]),E,a("ol",null,[a("li",null,[a("a",R,[n("shiro session文档"),t(s)])])]),z,a("ol",null,[a("li",null,[a("a",M,[n("apache shiro"),t(s)])])])])}const D=i(u,[["render",U],["__file","apache-shiro.html.vue"]]);export{D as default};
