import{_ as r}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as t,c as n,a as l,b as i,d as a,e as o,r as s}from"./app.59944050.js";const d="/assets/memory-struct.179ded31.png",c="/assets/mem-struct.41665cee.png",h="/assets/shoujisuanfa.011713f8.png",g="/assets/shoujisuanfa.011713f8.png",u="/assets/application-service.5570ad27.png",p="/assets/solution.5d2454b9.png",m="/assets/out-memory.a3cd47dd.png",_="/assets/SOP.033adb58.png",C="/assets/result-fish.ffb1ef70.png",f="/assets/param.55cf8083.png",x={},X=o('<h2 id="并行收集器" tabindex="-1"><a class="header-anchor" href="#并行收集器" aria-hidden="true">#</a> 并行收集器</h2><ol><li>启用。<code>-XX:+ UseParallelGC</code></li><li>启用线程数。<code>-XX: parallelgclines =&lt;N&gt;</code>控制线程数 <ol><li><strong>线程数&gt;8</strong>，占5/8个。</li><li><strong>线程数&lt;8</strong>，数值为线程个数。</li></ol></li><li>碎片效应。 <ol><li>原因。由于多个处理器进行垃圾回收时，在年轻代升级到老年代过程中会产生碎片化。</li><li>解决方案。 <ol><li>减少垃圾收集器线程的数量</li><li>增加老年代生成的大小</li></ol></li></ol></li><li>行为指定 <ol><li>最大垃圾收集暂停时间。<code>-XX:MaxGCPauseMillis =&lt;N&gt;</code>，无法保证一定满足要求</li><li>吞吐量。<code>-XX:GCTimeRatio=&lt;N&gt;</code>，垃圾收集时间与应用时间的比率：<code>1/(1+&lt;N&gt;)</code></li><li>占用空间（堆大小）。<code>-Xmx &lt;N&gt;</code>，指定最大堆占用空间，<code>-Xms &lt;N&gt;</code>，最小化堆的大小</li><li><code>java -XX:+PrintFlagsFinal</code>，查看当前jdk的<strong>默认配置</strong></li></ol></li></ol><h2 id="运行时数据区域" tabindex="-1"><a class="header-anchor" href="#运行时数据区域" aria-hidden="true">#</a> 运行时数据区域</h2><ol><li>线程运行时不会因为扩展而导致内存溢出</li><li></li></ol><h3 id="程序计数器" tabindex="-1"><a class="header-anchor" href="#程序计数器" aria-hidden="true">#</a> 程序计数器</h3><p>一块较小的内存空间，是当前线程所执行的字节码的行号指示器</p><h3 id="java-虚拟机栈" tabindex="-1"><a class="header-anchor" href="#java-虚拟机栈" aria-hidden="true">#</a> java 虚拟机栈</h3><p>存放编译期可知的各种 java 基本数据类型、对象引用和 returnAddress 类型</p><h3 id="本地方法栈" tabindex="-1"><a class="header-anchor" href="#本地方法栈" aria-hidden="true">#</a> 本地方法栈</h3><p>为虚拟机使用到的本地方法服务</p><h3 id="java-堆" tabindex="-1"><a class="header-anchor" href="#java-堆" aria-hidden="true">#</a> java 堆</h3><ol><li>虚拟机所管理的内存中最大的一块</li><li>被所有线程共享的一块内存区域</li><li>唯一目的用于存放对象实例</li></ol><h3 id="jvm堆大小" tabindex="-1"><a class="header-anchor" href="#jvm堆大小" aria-hidden="true">#</a> JVM堆大小</h3><ol><li>影响垃圾回收性能的是<strong>可用内存大小</strong></li><li>内存空间如下图所示： <img src="'+d+'" alt="image"></li><li>堆大小准则 <ol><li>设置<code>-Xms</code>和<code>-Xmx</code>设置为相同的值</li><li>向虚拟机授予尽可能多的内存</li><li>随着处理器数量的增加而增加内存</li></ol></li><li>年轻代。通过<code>-XX:NewRatio=3</code>来控制，即<code>eden</code>+<code>survivos spaces</code>大小为堆大小的1/4 <ol><li>survivos空间大小。<code>-XX:SurvivorRatio=6</code>，设置eden与survivos空间占比为1:6,也就是占年轻代空间的1/8（存在两个survivor）</li><li><code>-XX:+ PrintTenuringDistribution</code>：显示阀值与年轻代对象的年龄，可以观察应用程序对象的寿命分布</li></ol></li></ol><h3 id="方法区" tabindex="-1"><a class="header-anchor" href="#方法区" aria-hidden="true">#</a> 方法区</h3><ol><li>被各个线程所共享的内存区域</li><li>用于存储被虚拟机加载的类型信息、常量、静态变量、即时编译器编译后的代码缓存等</li></ol><h3 id="永久代" tabindex="-1"><a class="header-anchor" href="#永久代" aria-hidden="true">#</a> 永久代</h3><ol><li>在 HotSpot 虚拟机上开发、部署程序</li><li>存在<code>-XX:MaxPermSize</code>的上限</li><li>逐步被本地内存所取代</li></ol><h4 id="运行时常量池" tabindex="-1"><a class="header-anchor" href="#运行时常量池" aria-hidden="true">#</a> 运行时常量池</h4><p>用于存放编译期生成的各种字面量与符号引用</p><h3 id="元数据" tabindex="-1"><a class="header-anchor" href="#元数据" aria-hidden="true">#</a> 元数据</h3><ol><li><code>-XX:MaxMetaspaceSize</code>。设置元空间最大值，默认为-1（只限制与本地内存大小）</li><li><code>-XX:MetaspaceSize</code>。指定元空间的初始空间大小</li><li><code>-XX:MinMetaspaceFreeRatio</code>。在垃圾收集之后控制最小的元空间剩余容量的百分比。</li></ol><h3 id="直接内存" tabindex="-1"><a class="header-anchor" href="#直接内存" aria-hidden="true">#</a> 直接内存</h3><p>分配不受 Java 堆大小的限制</p><h2 id="内存划分" tabindex="-1"><a class="header-anchor" href="#内存划分" aria-hidden="true">#</a> 内存划分</h2><ol><li><p>内存布局分为三个部分</p><ol><li>对象头。 <ol><li>用于存储对象自身的运行时数据【Mark Word】</li><li>类型指针。对象指向它的类型元数据的指针</li></ol></li><li>实例数据。对象真正的有效信息，在程序代码里面定义的各种类型的字段内容</li><li>对齐填充， <img src="'+c+'" alt="image"></li></ol></li><li><p>蓝色部分为 GC 主要工作区</p></li><li><p>Direct Memory 中，分配内存不够时 GC 通过<code>Cleaner#clean</code>间接管理</p></li></ol><ul><li>任何自动内存管理系统都会面临的步骤：为新对象分配空间，收集垃圾对象空间</li></ul><h2 id="分配对象" tabindex="-1"><a class="header-anchor" href="#分配对象" aria-hidden="true">#</a> 分配对象</h2><ol><li><strong>空闲列表</strong>。从列表中足够大的空间划分给对象实例，并更新列表上的记录。通过额外的存储记录空闲的地址，将随机 IO 变为顺序 IO</li><li><strong>碰撞指针</strong>。通过一个指针作为分界点，需要分配内存时，仅需把指针往空闲的一端移动与对象大小相等的距离，分配效率较高，但使用场景有限。【带空间压缩整理的收集器】</li><li>虚拟机采用 CAS 配上失败重试的方式保证更新操作的原子性。</li><li>本地线程分配缓存。每个线程在 Java 堆中预先分配一小块内存</li></ol><h2 id="收集对象" tabindex="-1"><a class="header-anchor" href="#收集对象" aria-hidden="true">#</a> 收集对象</h2><h3 id="识别垃圾" tabindex="-1"><a class="header-anchor" href="#识别垃圾" aria-hidden="true">#</a> 识别垃圾</h3><ol><li>引用计数法【早期使用】。对每个对象的引用进行计数，多线程环境下同步代价高，能处理循环引用问题。相互引用无法进行回收。</li><li><strong>可达性分析（引用链法）</strong>。从 GC Root 开始进行对象搜索，被搜索到的对象即为可达对象。 <ol><li>可作为 GC Root 的对象。 <ol><li>引用的对象</li><li>类静态属性引用的对象</li><li>常量引用的对象</li><li>JNI 引用的对象</li><li>内部的引用机制</li><li>所有被同步锁持有的对象</li><li>反映虚拟机内部情况的对象</li></ol></li></ol></li><li>引用 <ol><li>分类 <ol><li>强引用。指程序代码中 new 的引用赋值</li><li>软引用。一些有用但非必须的对象</li><li>弱引用。比软引用更弱，生命周期为下一次垃圾收集为止</li><li>虚引用。最弱的引用关系，为了能在这个对象被收集器回收时收到一个系统通知</li></ol></li></ol></li><li>任何对象的 finalize()方法都只会被系统自动调用一次</li><li>方法区回收 <ol><li>废弃的常量。 <ol><li>已回收的实例</li><li>类加载器已被回收</li><li>类对应的 java.lang.Class 对象没有在任何地方呗引用</li></ol></li><li>不再使用的类型</li><li><code>-verbose:class</code>和<code>-XX:+TraceClassLoading</code>来查看类加载信息</li></ol></li></ol><h3 id="hotspot-细节实现" tabindex="-1"><a class="header-anchor" href="#hotspot-细节实现" aria-hidden="true">#</a> HotSpot 细节实现</h3><ol><li>根节点枚举都必须暂停用户线程（STW）；必须在一个能保障一致性的快照中得以进行</li><li>安全点。以是否具有让程序长时间执行的特征为标准进行选取 <ol><li>抢先式中断。没有虚拟机采用</li><li>主动式中断。设置标记，由各个执行线程不停地主动轮询，发现中断标志即就近的安全点进行挂起</li></ol></li><li>安全区域。</li><li>记忆集与卡表 <ol><li>记忆集。用于避免把整个老年代加进 GC Roots 扫描范围，用于记录从非收集区域指向收集区域的指针集合的抽象数据结构</li><li>记忆精度包含字长精度、对象精度和卡精度【卡表】</li><li>卡页。以 2 的 N 次幂的字节数</li></ol></li><li>写屏障</li><li>并发的可达性 <ol><li>三色标记 <ol><li>白色。对象尚未被垃圾收集器访问过</li><li>黑色。已经被垃圾收集器访问过</li><li>灰色。对象虽已被拉结收集器访问过，但对象本身仍存在至少一个引用</li></ol></li></ol></li></ol><h3 id="收集算法" tabindex="-1"><a class="header-anchor" href="#收集算法" aria-hidden="true">#</a> 收集算法</h3><ol><li>Mark-Sweep（标记-清除）。 <ol><li>追踪阶段。标记每个遇到的对象。</li><li>清除阶段。将所有未标记的对象进行回收。</li></ol></li><li>Mark-Compact（标记-整理）。 <ol><li>与 Mark-Sweep 第一阶段类似。</li><li>按存活对象按照整理顺序进行整理。</li></ol></li><li>Copying（复制）。通过碰撞指针的方式进行快速地分配内存。 <img src="'+h+'" alt="image"></li></ol><h2 id="gc-评价标准" tabindex="-1"><a class="header-anchor" href="#gc-评价标准" aria-hidden="true">#</a> GC 评价标准</h2><ol><li><strong>延迟（Latency）</strong>。最大停顿时间，即垃圾收集过程中一次 STW 的最长时间，越短越好，一定程度上可以接受频次的增大。</li><li><strong>吞吐量（Throughput）</strong>。应用 GC 耗时占系统总运行时间的百分比，吞吐量优先的收集器可以接受较长的停顿。一次停顿的时间不超过应用服务的 TP9999，GC 的吞吐量不小于 99.99%</li><li><strong>Footprint（资源量大小测量）</strong>。</li><li><strong>反应速度</strong>。 <img src="'+g+'" alt="image"></li></ol><h2 id="gc-cause" tabindex="-1"><a class="header-anchor" href="#gc-cause" aria-hidden="true">#</a> GC Cause</h2><ol><li><strong>System.gc()</strong>。手动触发 GC 操作</li><li>CMS。重点关注<strong>CMS Initial Mark</strong>和<strong>CMS Final Remark</strong>两个 STW 阶段</li><li><strong>Promotion Failure</strong>。Old 区没有足够的空间分配给 Young 区晋升的对象。</li><li><strong>Concurrent Mode Failure</strong>。Old 区预留的空间不足以分配给新的对象，此时收集器会发生退化，严重影响 GC 性能。</li><li><strong>GCLocker Initiated GC</strong>。如果线程执行在 JNI 临界区时，刚好需要进行 GC，此时 GC Locker 将会阻止 GC 的发生，同时阻止其他线程进入 JNI 临界区，直到最后一个线程退出临界区时触发一次 GC。</li></ol><h2 id="是不是-gc-引发的问题" tabindex="-1"><a class="header-anchor" href="#是不是-gc-引发的问题" aria-hidden="true">#</a> 是不是 GC 引发的问题</h2><ol><li>时序分析。先发生的事件是根因的概率更大。</li><li>概率分析。</li><li>实验分析。</li><li>反证分析。判断表象的发不发生跟结果是否有相关性。</li><li>问题点 <ol><li>CPU 负载高。用<strong>火焰图</strong>看下热点</li><li>慢查询增多。DB 情况</li><li>线程 Block。锁竞争</li></ol></li></ol><h2 id="应用类型" tabindex="-1"><a class="header-anchor" href="#应用类型" aria-hidden="true">#</a> 应用类型</h2><ol><li><strong>IO 交互型</strong>。互联网服务，对内存要求不大，大部分对象在 TP9999 的时间内都会死亡，Young 区越大越好。</li><li><strong>MEM 计算型</strong>。分布式计算服务，对内存要求高，对象存活时间长，old 区越大越好 <img src="'+u+'" alt="image"></li></ol><h2 id="问题分类" tabindex="-1"><a class="header-anchor" href="#问题分类" aria-hidden="true">#</a> 问题分类</h2>',45),b=o('<li>Unexpected GC（意外发生的 GC）。 <ol><li>Space Shock。空间动荡问题。JVM 参数中的**-Xms** 和**-Xmx**不一致时，每当空间不够时会发生一次 GC <ol><li>尽量将成对出现的空间大小配置参数设置成固定的，如 -Xms 和 -Xmx，-XX:MaxNewSize 和 -XX:NewSize，-XX:MetaSpaceSize 和 -XX:MaxMetaSpaceSize 等</li><li>保证 Java 虚拟机的堆的稳定，确保-Xms 和-Xmx 设置成一个值，同理将 MetaSpace 区也可以设置成大小一致。</li></ol></li><li>Explicit GC。显示执行 GC 问题。 <ol><li>CMS GC 共分为 Background 和 Foreground 两种模式</li><li>-XX:+ExplicitGCInvokesConcurrent 和 -XX:+ExplicitGCInvokesConcurrentAndUnloadsClasses，采用高性能的并发收集方式进行收集</li></ol></li></ol></li><li>Partial GC。只对某些分代/分区进行回收 <ol><li>Young GC。ParNew Young GC 频繁。</li><li>Old GC。 <ol><li>CMS old GC 频繁；</li><li>Old GC 不频繁但单次耗时大</li></ol></li></ol></li><li>FULL GC <ol><li>常规内存泄露问题的解题思路 <img src="'+p+'" alt="image"></li></ol></li><li>MetaSpace。元空间回收引发的问题</li>',4),G=l("li",null,"堆外内存泄露。通过 top 命令发现 Java 进程的 RES 甚至超过了-Xmx 的大小",-1),v=l("code",null,"gperftools",-1),S={href:"https://blog.csdn.net/10km/article/details/83820080",target:"_blank",rel:"noopener noreferrer"},M=l("code",null,"BTrace",-1),k={href:"https://www.cnblogs.com/fengzheng/p/7416942.html",target:"_blank",rel:"noopener noreferrer"},j=l("li",null,[i("分析堆外内存问题如下： "),l("img",{src:m,alt:"image"})],-1),N=l("li",null,"JNI",-1),T=o('<ul><li>GC 问题较难排查，需要谨慎使用</li></ul><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><h3 id="处理流程" tabindex="-1"><a class="header-anchor" href="#处理流程" aria-hidden="true">#</a> 处理流程</h3><p><img src="'+_+'" alt="image"></p><ol><li>制定标准。需要结合应用系统的 TP9999 时间和延迟、吞吐量等设定具体的指标</li><li>保留现场。 <ol><li>如果条件允许，一定不要直接操作重启、回滚等动作恢复</li><li>优先通过摘掉流量的方式来恢复</li></ol></li><li>因果分析。判断 GC 异常与其他系统指标异常的因果关系。</li><li>根因分析。 <img src="'+C+'" alt="image"></li></ol><h3 id="调优建议" tabindex="-1"><a class="header-anchor" href="#调优建议" aria-hidden="true">#</a> 调优建议</h3><ol><li>Trade Off。优化在延迟(Latency)、吞吐量(Throughput)、容量(Capacity)三者之间进行权衡。</li><li>最终手段。大部分情况下是通过 GC 的情况找出一些业务问题</li><li>控制变量。每次调优过程尽可能只调整一个变量</li><li>善用搜索。重点关注 StackOverFlow、Github 中的 issue 以及各种论坛博客</li><li>调优重点。</li><li>GC 参数。 <img src="'+f+'" alt="image"></li><li>禁用偏向锁。</li></ol><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料" aria-hidden="true">#</a> 资料</h2>',8),I={href:"https://book.douban.com/subject/6809987/",target:"_blank",rel:"noopener noreferrer"},P=l("li",null,"深入理解 Java 虚拟机",-1),F={href:"https://tech.meituan.com/2020/11/12/java-9-cms-gc.html",target:"_blank",rel:"noopener noreferrer"},w={href:"https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/parallel.html#CHDCFBIF",target:"_blank",rel:"noopener noreferrer"},z={href:"https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/sizing.html#sizing_generations",target:"_blank",rel:"noopener noreferrer"};function J(O,y){const e=s("ExternalLinkIcon");return t(),n("div",null,[X,l("ol",null,[b,l("li",null,[i("Direct Memory。 "),l("ol",null,[G,l("li",null,[i("使用"),v,i("工具来追踪分配内存的命令("),l("a",S,[i("参考工具"),a(e)]),i(")；")]),l("li",null,[i("使用"),M,i("定位具体的调用栈（"),l("a",k,[i("参考工具"),a(e)]),i("）。")]),j])]),N]),T,l("ol",null,[l("li",null,[l("a",I,[i("The Garbage Collection Handbook"),a(e)])]),P,l("li",null,[l("a",F,[i("美团博客-CMS GC 问题上"),a(e)])]),l("li",null,[l("a",w,[i("oracle jdk"),a(e)])]),l("li",null,[l("a",z,[i("jdk 堆内存大小"),a(e)])])])])}const B=r(x,[["render",J],["__file","index.html.vue"]]);export{B as default};
