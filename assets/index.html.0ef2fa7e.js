import{_ as r}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as t,c as n,a as e,b as i,d as l,e as s,r as o}from"./app.59944050.js";const h="/assets/redBlackTree.63aa2481.png",d="/assets/insert.d4c20211.png",c="/assets/left1.a2dc3a86.png",g="/assets/left2.34b3564d.png",_="/assets/left3.721d3b7d.png",m="/assets/turnLeft.6b8c19c9.png",p="/assets/turnRight.4f8576f4.png",u={},f=s('<h1 id="红黑树" tabindex="-1"><a class="header-anchor" href="#红黑树" aria-hidden="true">#</a> 红黑树</h1><p><img src="'+h+'" alt="image"></p><h2 id="面试问题" tabindex="-1"><a class="header-anchor" href="#面试问题" aria-hidden="true">#</a> 面试问题</h2><ol><li>能否给出完整定义</li><li>能否介绍自己对红黑树的理解</li><li>能否通过旋转、染色等操作在给定的场景下对一棵红黑树进行调整使其符合定义</li></ol><h2 id="红黑树的本质" tabindex="-1"><a class="header-anchor" href="#红黑树的本质" aria-hidden="true">#</a> 红黑树的本质</h2><p>是<strong>2-3-4 树</strong>的一种实现。阶数为 4 的 B 树【平衡树】，主要用来做查找 <strong>平衡</strong>的定义。从空链接到根节点距离相等，非叶子节点是不会存在空键接。 <strong>左倾红黑树</strong>。只允许以左侧红色子节点形式出现，红色节点顺时针方向旋转 45 度。红黑树到 2-3 树的转化： ![image](./2-3 tree.png) <strong>完美黑色平衡</strong>。2-3 树的叶节点到根节点距离相同。 <strong>目的</strong>。尽可能保证二叉查找树中的元素尽量均衡的分布在树的两侧。</p><h2 id="红黑树的特性" tabindex="-1"><a class="header-anchor" href="#红黑树的特性" aria-hidden="true">#</a> 红黑树的特性</h2><ul><li>从根到叶子的最长的可能路径不多于最短的可能路径的两倍长。</li></ul><h2 id="红黑树的操作" tabindex="-1"><a class="header-anchor" href="#红黑树的操作" aria-hidden="true">#</a> 红黑树的操作</h2><ol><li>2-3 树插入。</li></ol><ul><li>原则。将这个元素常识性地放在已经存在的节点上 <img src="'+d+'" alt="image"></li></ul><ol><li>2-3 树 2 节点删除</li></ol><ul><li>除非当前节点是根节点，否则当前节点的父节点一定是一个非 2 节点。</li></ul><ol><li>左倾红黑树的<strong>插入</strong><ol><li>待插入元素比黑父大，插在了黑父的右边，而黑父左边是红色儿子。 <img src="'+c+'" alt="image"></li><li>待插入元素比红父小，且红父自身就是左倾。 <img src="'+g+'" alt="image"></li><li>待插入元素比红父大，且红父自身就是左倾。 <img src="'+_+'" alt="image"></li></ol></li><li>左倾红黑树的<strong>删除</strong><ul><li>选择它的前驱节点或者后继节点元素来替代它，转而删除它的前驱/后继节点。</li></ul></li></ol><h2 id="红黑树的-5-条定义" tabindex="-1"><a class="header-anchor" href="#红黑树的-5-条定义" aria-hidden="true">#</a> 红黑树的 5 条定义</h2><ol><li>节点颜色有红色和黑色</li><li>根节点必为黑色</li><li>所有叶子节点都是黑色</li><li>任意节点到叶子节点经过的黑色节点数目相同</li><li>不会有连续的红色节点</li></ol><h2 id="二叉查找树" tabindex="-1"><a class="header-anchor" href="#二叉查找树" aria-hidden="true">#</a> 二叉查找树</h2><ol><li>节点有一个元素和两个指针域，左指针指向小于 X 的元素,右指针指向大于 X 的元素.</li></ol><h2 id="树的旋转" tabindex="-1"><a class="header-anchor" href="#树的旋转" aria-hidden="true">#</a> 树的旋转</h2><ul><li>旋转是二叉树调平的精髓。</li></ul><ol><li>左旋【逆时针】 <img src="'+m+'" alt="image"></li><li>右旋【顺时针】 <img src="'+p+'" alt="image"></li></ol><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ol><li>3 个一组，左插左旋，右插右旋，中间晋升；</li><li>一维列表，分组递归，代表排序，逐级上升；</li><li>增删改查，定位小组，重复上述，得到答案。</li></ol><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料" aria-hidden="true">#</a> 资料</h2>',24),x={href:"https://zhuanlan.zhihu.com/p/273829162",target:"_blank",rel:"noopener noreferrer"},b={href:"https://zh.wikipedia.org/wiki/%E7%BA%A2%E9%BB%91%E6%A0%91",target:"_blank",rel:"noopener noreferrer"};function k(B,E){const a=o("ExternalLinkIcon");return t(),n("div",null,[f,e("ol",null,[e("li",null,[e("a",x,[i("什么是红黑树"),l(a)])]),e("li",null,[e("a",b,[i("红黑树——维基百科"),l(a)])])])])}const v=r(u,[["render",k],["__file","index.html.vue"]]);export{v as default};
