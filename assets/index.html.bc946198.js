import{_ as l}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as a,c as o,a as e,b as i,d as n,e as t,r as c}from"./app.59944050.js";const d="/assets/cms-log.b74d6b9d.png",s={},h=t('<h1 id="定义" tabindex="-1"><a class="header-anchor" href="#定义" aria-hidden="true">#</a> 定义</h1><p>为那些希望较短的垃圾收集暂停并且可以在应用程序运行时与垃圾收集器共享处理器资源的应用程序而设计的</p><h1 id="名词定义" tabindex="-1"><a class="header-anchor" href="#名词定义" aria-hidden="true">#</a> 名词定义</h1><ol><li>并发收集模式问题。 <ol><li>无法在使用权产生的一代填满之前完成对无法访问的对象的回收</li><li>可用空闲空间块无法满足分配要求</li></ol></li><li>OutOfMemoryError。回收花费耗时太长并且回收的堆小于2%，由于并发收集模式问题或显示<code>System.gc()</code>造成的。</li><li>浮动垃圾。尚未回收的无法访问的对象，是由于垃圾回收线程与应用线程并发运行造成的，可通过增加老年代空间来解决</li><li>增量模式在JDK8中<strong>不推荐</strong>使用</li></ol><h1 id="启用方式" tabindex="-1"><a class="header-anchor" href="#启用方式" aria-hidden="true">#</a> 启用方式</h1><ol><li><code>-XX: +UseConcMarkSweepGC</code></li><li><code>-XX:ParallelCMSThreads=&lt;N&gt;</code>,设定年轻代的并行收集线程数，默认值按(cpu &lt;= 8) ? cpu : 3 + ((cpu * 5) / 8)</li><li><code>-XX:+CMSPermGenSweepingEnabled -XX:+CMSClassUnloadingEnabled</code>,开启回收Perm区</li></ol><h1 id="收集周期" tabindex="-1"><a class="header-anchor" href="#收集周期" aria-hidden="true">#</a> 收集周期</h1><h2 id="老年代" tabindex="-1"><a class="header-anchor" href="#老年代" aria-hidden="true">#</a> 老年代</h2><ol><li>初始标记。将从<strong>根</strong>直接访问的对象和从<strong>堆</strong>中其他位置直接标记为<strong>活动对象</strong></li><li>并发标记</li><li>重新标记（备注停顿，<strong>耗时</strong>比初始标记长）。处理因应用程序线程更新对象引用而导致的<strong>并发跟踪遗漏</strong>的对象。</li><li>并发清除</li></ol><h2 id="年轻代" tabindex="-1"><a class="header-anchor" href="#年轻代" aria-hidden="true">#</a> 年轻代</h2><p>并行复制收集器，跟Paralle gc算法</p><h1 id="gc日志格式" tabindex="-1"><a class="header-anchor" href="#gc日志格式" aria-hidden="true">#</a> GC日志格式</h1><p>指令：<code>-XX:+PrintGCDetails</code>和<code>-verbose:gc</code><img src="'+d+'" alt="image"></p><ol><li>CMS-initial-mark。并发收集周期<strong>开始</strong>标识</li><li>CMS-concurrent-mark。并发标记阶段<strong>结束</strong>标识</li><li>CMS-concurrent-sweep。并发清除阶段的结束</li><li>CMS-concurrent-preclean。预清洁阶段，在准备备注阶段CMS-mark的同时执行的工作</li><li>CMS-concurrent-reset。正在准备下一个并发收集</li><li>full gc. <ol><li>Prommotion failed. <ol><li>原因。空间不够且因老年代空间不够无法向其进行转移，导致FULL GC。</li><li>解决方案。调整空间大小</li></ol></li><li>Concurrent mode failed <ol><li>原因。老年代被回收太慢。</li><li>解决方案。调小<code>-XX:CMSInitiatingOccupancyFraction</code>参数的值</li></ol></li></ol></li></ol><h1 id="资料参考" tabindex="-1"><a class="header-anchor" href="#资料参考" aria-hidden="true">#</a> 资料参考</h1>',15),g={href:"https://docs.oracle.com/javase/8/docs/technotes/guides/vm/gctuning/cms.html#concurrent_mark_sweep_cms_collector",target:"_blank",rel:"noopener noreferrer"};function m(u,p){const r=c("ExternalLinkIcon");return a(),o("div",null,[h,e("ol",null,[e("li",null,[e("a",g,[i("Concurrent Mark Sweep (CMS) Collector"),n(r)])])])])}const C=l(s,[["render",m],["__file","index.html.vue"]]);export{C as default};
