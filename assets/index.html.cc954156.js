import{_ as n}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as s,c as a,e}from"./app.59944050.js";const t="/assets/PoolThreadCache.11e08f96.png",p="/assets/Recycler.d43ca2af.png",c="/assets/memory-region-cache.d9a327ff.png",o="/assets/memory.8e5c0cf0.png",l={},i=e(`<h1 id="内存原理" tabindex="-1"><a class="header-anchor" href="#内存原理" aria-hidden="true">#</a> 内存原理</h1><blockquote><p>参考 Jemalloc 的技术特性</p></blockquote><ol><li><code>Arena</code>。将其分成许多个小块来分而治之。</li><li><code>Thread cache</code>。给各自的线程 thread cache 领域。</li></ol><h2 id="创建堆缓冲区" tabindex="-1"><a class="header-anchor" href="#创建堆缓冲区" aria-hidden="true">#</a> 创建堆缓冲区</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ByteBuf</span> <span class="token function">buffer</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">ALLOC</span><span class="token punctuation">.</span><span class="token function">heapBuffer</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// AbstractByteBufAllocator：实现</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">ByteBuf</span> <span class="token function">heapBuffer</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">int</span> maxCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> maxCapacity <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> emptyBuf<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 验证参数合法性，最大的堆缓冲区容量是int最大值字节</span>
        <span class="token function">validate</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">,</span> maxCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">newHeapBuffer</span><span class="token punctuation">(</span>initialCapacity<span class="token punctuation">,</span> maxCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="基于内存池创建堆缓冲区" tabindex="-1"><a class="header-anchor" href="#基于内存池创建堆缓冲区" aria-hidden="true">#</a> 基于内存池创建堆缓冲区</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token comment">// PooledByteBufAllocator</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">ByteBuf</span> <span class="token function">newHeapBuffer</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span> <span class="token keyword">int</span> maxCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 从本地缓存内存中取</span>
        <span class="token class-name">PoolThreadCache</span> cache <span class="token operator">=</span> threadCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 获取堆内区域</span>
        <span class="token class-name">PoolArena</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> heapArena <span class="token operator">=</span> cache<span class="token punctuation">.</span>heapArena<span class="token punctuation">;</span>

        <span class="token keyword">final</span> <span class="token class-name">ByteBuf</span> buf<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>heapArena <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 从堆区域中分配缓冲区</span>
            buf <span class="token operator">=</span> heapArena<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>cache<span class="token punctuation">,</span> initialCapacity<span class="token punctuation">,</span> maxCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 直接分配内存</span>
            buf <span class="token operator">=</span> <span class="token class-name">PlatformDependent</span><span class="token punctuation">.</span><span class="token function">hasUnsafe</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span>
                    <span class="token keyword">new</span> <span class="token class-name">UnpooledUnsafeHeapByteBuf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> initialCapacity<span class="token punctuation">,</span> maxCapacity<span class="token punctuation">)</span> <span class="token operator">:</span>
                    <span class="token keyword">new</span> <span class="token class-name">UnpooledHeapByteBuf</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> initialCapacity<span class="token punctuation">,</span> maxCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 检测是否有内存泄漏</span>
        <span class="token keyword">return</span> <span class="token function">toLeakAwareBuffer</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// PoolArena</span>
    <span class="token class-name">PooledByteBuf</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">allocate</span><span class="token punctuation">(</span><span class="token class-name">PoolThreadCache</span> cache<span class="token punctuation">,</span> <span class="token keyword">int</span> reqCapacity<span class="token punctuation">,</span> <span class="token keyword">int</span> maxCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 创建基于内存池的byteBuf</span>
        <span class="token class-name">PooledByteBuf</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> buf <span class="token operator">=</span> <span class="token function">newByteBuf</span><span class="token punctuation">(</span>maxCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 分配内存</span>
        <span class="token function">allocate</span><span class="token punctuation">(</span>cache<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> reqCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> buf<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 按申请的内存大小进行内存分配</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">allocate</span><span class="token punctuation">(</span><span class="token class-name">PoolThreadCache</span> cache<span class="token punctuation">,</span> <span class="token class-name">PooledByteBuf</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> buf<span class="token punctuation">,</span> <span class="token keyword">final</span> <span class="token keyword">int</span> reqCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">final</span> <span class="token keyword">int</span> sizeIdx <span class="token operator">=</span> <span class="token function">size2SizeIdx</span><span class="token punctuation">(</span>reqCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>sizeIdx <span class="token operator">&lt;=</span> smallMaxSizeIdx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">tcacheAllocateSmall</span><span class="token punctuation">(</span>cache<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> reqCapacity<span class="token punctuation">,</span> sizeIdx<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>sizeIdx <span class="token operator">&lt;</span> nSizes<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token function">tcacheAllocateNormal</span><span class="token punctuation">(</span>cache<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> reqCapacity<span class="token punctuation">,</span> sizeIdx<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> normCapacity <span class="token operator">=</span> directMemoryCacheAlignment <span class="token operator">&gt;</span> <span class="token number">0</span>
                    <span class="token operator">?</span> <span class="token function">normalizeSize</span><span class="token punctuation">(</span>reqCapacity<span class="token punctuation">)</span> <span class="token operator">:</span> reqCapacity<span class="token punctuation">;</span>
            <span class="token comment">// Huge allocations are never served via the cache so just call allocateHuge</span>
            <span class="token function">allocateHuge</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> normCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="分配的内存类型" tabindex="-1"><a class="header-anchor" href="#分配的内存类型" aria-hidden="true">#</a> 分配的内存类型</h2><ol><li>直接内存</li><li>堆内存</li></ol><h2 id="基于内存池分配堆内存" tabindex="-1"><a class="header-anchor" href="#基于内存池分配堆内存" aria-hidden="true">#</a> 基于内存池分配堆内存</h2><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token comment">// PoolArena</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token class-name">PooledByteBuf</span><span class="token operator">&lt;</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span> <span class="token function">newByteBuf</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">HAS_UNSAFE</span> <span class="token operator">?</span> <span class="token class-name">PooledUnsafeHeapByteBuf</span><span class="token punctuation">.</span><span class="token function">newUnsafeInstance</span><span class="token punctuation">(</span>maxCapacity<span class="token punctuation">)</span>
                <span class="token operator">:</span> <span class="token class-name">PooledHeapByteBuf</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span>maxCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">static</span> <span class="token class-name">PooledHeapByteBuf</span> <span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 从对象回收器中回收一个对象</span>
        <span class="token class-name">PooledHeapByteBuf</span> buf <span class="token operator">=</span> <span class="token constant">RECYCLER</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        buf<span class="token punctuation">.</span><span class="token function">reuse</span><span class="token punctuation">(</span>maxCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> buf<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * Method must be called before reuse this <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">PooledByteBufAllocator</span></span><span class="token punctuation">}</span>
     */</span>
    <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">reuse</span><span class="token punctuation">(</span><span class="token keyword">int</span> maxCapacity<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">maxCapacity</span><span class="token punctuation">(</span>maxCapacity<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置引用计数为1</span>
        <span class="token function">resetRefCnt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 设置读写索引</span>
        <span class="token function">setIndex0</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">discardMarks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="内存分配总结" tabindex="-1"><a class="header-anchor" href="#内存分配总结" aria-hidden="true">#</a> 内存分配总结</h2><ol><li>从本地线程缓冲池中找到<code>poolThreadCache</code>，再从<code>poolThreadCache</code>中找到<code>heapArena</code>，如果有<strong>存在</strong><code>headArena</code>就是开始分配内存</li><li>分配内存的时候先从<code>对象回收器RECYCLER</code>中回收一个对象<code>PooledByteBuf</code>。对象回收器类似一个对象池的作用，在进行分配内存，对象可以循环利用，提供内存分配效率和 JVM gc 效率，这个对象回收器是基于引用计数方式实现的。</li><li>分配内存</li><li>0 copy <ol><li>主要指用户态和内核态之间来回 copy 数据</li></ol></li></ol><h2 id="poolthreadcache" tabindex="-1"><a class="header-anchor" href="#poolthreadcache" aria-hidden="true">#</a> PoolThreadCache</h2><ol><li>原理。给每个线程预先分配一块内存，在每个对象需要进行对象创建分配内存的时候先从本地线程缓存中获取内存，获取不到在从堆中申请内存，在一定程度上减少操作同一块内存时的锁争用</li><li>结构图 <ol><li>数据结构：平衡二叉树</li></ol></li><li>组成 1. <code>PoolChunk</code>。负责内存的分配逻辑，最小单位是一个 page,<strong>8k</strong>,由 2048 个 subpage 组成，向 OS 申请的最小内存，使用完全二叉树来对组织内部的内存。 1. <code>PoolChunkList</code>。管理<code>PoolChunk</code>的链表。 1. <code>PoolSubPage</code>。一个内存页大小默认是<strong>8k</strong><img src="`+t+'" alt="image"></li></ol><h2 id="recycler-对象池" tabindex="-1"><a class="header-anchor" href="#recycler-对象池" aria-hidden="true">#</a> Recycler 对象池</h2><blockquote><p>基于 netty 的<code>stack</code>实现，采用了栈和队列实现。stack 用来支持同一个线程内的对象使用和回收，把当前回收的线程和要回收对象对应的 stack 绑定到一个 weakOrderQueue 存储在当前要回收对象所在的 stack 中，之所以这样设计在并发情况下<strong>一个线程绑定一个队列减少多个线程之间的锁争用提供应用的并发度</strong></p></blockquote><p><img src="'+p+`" alt="image"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token comment">// 队列</span>
    <span class="token keyword">static</span> <span class="token class-name">WeakOrderQueue</span> <span class="token function">newQueue</span><span class="token punctuation">(</span><span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> stack<span class="token punctuation">,</span> <span class="token class-name">Thread</span> thread<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// We allocated a Link so reserve the space</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Head</span><span class="token punctuation">.</span><span class="token function">reserveSpaceForLink</span><span class="token punctuation">(</span>stack<span class="token punctuation">.</span>availableSharedCapacity<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">final</span> <span class="token class-name">WeakOrderQueue</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakOrderQueue</span><span class="token punctuation">(</span>stack<span class="token punctuation">,</span> thread<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Done outside of the constructor to ensure WeakOrderQueue.this does not escape the constructor and so</span>
        <span class="token comment">// may be accessed while its still constructed.</span>
        <span class="token comment">// headQueue对象是用来维护在多线程情况下并发回收的时候标识其他线程和当前要回收对象所在stack的映射关系.</span>
        stack<span class="token punctuation">.</span><span class="token function">setHead</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> queue<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="处理回收-defaulthandler" tabindex="-1"><a class="header-anchor" href="#处理回收-defaulthandler" aria-hidden="true">#</a> 处理回收 DefaultHandler</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">DefaultHandle</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">implements</span> <span class="token class-name">Handle</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
        <span class="token comment">// 标记对象回收的id</span>
        <span class="token keyword">int</span> lastRecycledId<span class="token punctuation">;</span>
        <span class="token comment">// 标记当前要回收的对象id</span>
        <span class="token keyword">int</span> recycleId<span class="token punctuation">;</span>
        <span class="token comment">// 标记对象是否回收</span>
        <span class="token keyword">boolean</span> hasBeenRecycled<span class="token punctuation">;</span>

        <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> stack<span class="token punctuation">;</span>
        <span class="token comment">// 具体回收对象</span>
        <span class="token class-name">Object</span> value<span class="token punctuation">;</span>

        <span class="token class-name">DefaultHandle</span><span class="token punctuation">(</span><span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> stack<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>stack <span class="token operator">=</span> stack<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 具体回收业务处理</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">recycle</span><span class="token punctuation">(</span><span class="token class-name">Object</span> object<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>object <span class="token operator">!=</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token string">&quot;object does not belong to handle&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> stack <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>stack<span class="token punctuation">;</span>
            <span class="token comment">// 如果ID不一致，则表示已经回收</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>lastRecycledId <span class="token operator">!=</span> recycleId <span class="token operator">||</span> stack <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;recycled already&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token class-name">DefaultHandle</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> item<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Thread</span> currentThread <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 当前线程回收对象</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>threadRef<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> currentThread<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// The current Thread is the thread that belongs to the Stack, we can try to push the object now.</span>
            <span class="token comment">// 当前线程是属于堆栈的线程，尝试推对象</span>
            <span class="token function">pushNow</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// The current Thread is not the one that belongs to the Stack</span>
            <span class="token comment">// (or the Thread that belonged to the Stack was collected already), we need to signal that the push</span>
            <span class="token comment">// happens later.</span>
            <span class="token comment">// 当前线程不属于堆栈的对象，在后面发出push发生的信号</span>
            <span class="token function">pushLater</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> currentThread<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="命中逻辑及内存回收" tabindex="-1"><a class="header-anchor" href="#命中逻辑及内存回收" aria-hidden="true">#</a> 命中逻辑及内存回收</h2><ol><li>内存规格 <img src="`+c+'" alt="image"></li><li>内存分配流程 <ol><li>PoolThreadCache。线程独有的内存仓库</li><li>PoolArean。几个线程共享的内存仓库</li><li>全局变量指向的内存仓库，为所有线程共用</li><li>PoolChunck。向 OS 申请的最小内存，默认为 16M</li><li>Page。PoolChunk 所能管理的最小内存，PageSize 默认为 8k <img src="'+o+`" alt="image"></li></ol></li><li>堆外内存回收</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">PooledByteBuf</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">AbstractReferenceCountedByteBuf</span> <span class="token punctuation">{</span>

  <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">deallocate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>handle <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">final</span> <span class="token keyword">long</span> handle <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handle<span class="token punctuation">;</span>
            <span class="token comment">// 当前的ByteBuf不再指向任何一块内存</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>handle <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
            memory <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token comment">// 将ByteBuf的内存释放</span>
            chunk<span class="token punctuation">.</span>arena<span class="token punctuation">.</span><span class="token function">free</span><span class="token punctuation">(</span>chunk<span class="token punctuation">,</span> tmpNioBuf<span class="token punctuation">,</span> handle<span class="token punctuation">,</span> maxLength<span class="token punctuation">,</span> cache<span class="token punctuation">)</span><span class="token punctuation">;</span>
            tmpNioBuf <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            chunk <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token comment">// 将对象放入的对象回收站，循环利用</span>
            <span class="token function">recycle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>ByteBuf 释放内存</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">void</span> <span class="token function">free</span><span class="token punctuation">(</span><span class="token class-name">PoolChunk</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> chunk<span class="token punctuation">,</span> <span class="token class-name">ByteBuffer</span> nioBuffer<span class="token punctuation">,</span> <span class="token keyword">long</span> handle<span class="token punctuation">,</span> <span class="token keyword">int</span> normCapacity<span class="token punctuation">,</span> <span class="token class-name">PoolThreadCache</span> cache<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>chunk<span class="token punctuation">.</span>unpooled<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">int</span> size <span class="token operator">=</span> chunk<span class="token punctuation">.</span><span class="token function">chunkSize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">destroyChunk</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">;</span>
            activeBytesHuge<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token operator">-</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>
            deallocationsHuge<span class="token punctuation">.</span><span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">SizeClass</span> sizeClass <span class="token operator">=</span> <span class="token function">sizeClass</span><span class="token punctuation">(</span>handle<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>cache <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> cache<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> chunk<span class="token punctuation">,</span> nioBuffer<span class="token punctuation">,</span> handle<span class="token punctuation">,</span> normCapacity<span class="token punctuation">,</span> sizeClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// cached so not free it.</span>
                <span class="token keyword">return</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token function">freeChunk</span><span class="token punctuation">(</span>chunk<span class="token punctuation">,</span> handle<span class="token punctuation">,</span> normCapacity<span class="token punctuation">,</span> sizeClass<span class="token punctuation">,</span> nioBuffer<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,26),u=[i];function k(d,r){return s(),a("div",null,u)}const b=n(l,[["render",k],["__file","index.html.vue"]]);export{b as default};
