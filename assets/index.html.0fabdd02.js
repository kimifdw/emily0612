import{_ as a}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as n,c as e,e as s}from"./app.59944050.js";const i={},t=s(`<p>首先使代码正确运行，然后再提高代码速度。【正确编写并发程序的方法】</p><h2 id="知识点" tabindex="-1"><a class="header-anchor" href="#知识点" aria-hidden="true">#</a> 知识点</h2><ol><li>竞态条件。 当某个计算的正确性取决于多个线程的交替执行时序。最常见的竞态条件类型</li><li>先检查后执行（Check-Then-Act）</li><li>对象的状态。 存储在状态变量（例如实例或静态域）中的数据。</li><li>共享。 变量可以由多个线程同时访问；</li><li>可变。 变量的值在其生命周期内可以发生变化；</li><li>线程安全性。 当多个线程访问某个类时，不管运行时环境采用何种调度方式或者这些线程将如何交替执行，并且在主调代码不需要任何交替执行，并且在主调代码中不需要任何额外的同步或协同，这个类都能表现出正确的行为。无状态对象一定是线程安全的</li></ol><hr><h2 id="怎么做到线程安全" tabindex="-1"><a class="header-anchor" href="#怎么做到线程安全" aria-hidden="true">#</a> 怎么做到线程安全</h2><ul><li><code>synchronized</code> 在多个线程访问某个状态变量并且其中有一个线程执行写入时，<strong>协同</strong>这些线程对变量的访问。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">int</span> <span class="token function">getNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> value<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="避免竞态条件" tabindex="-1"><a class="header-anchor" href="#避免竞态条件" aria-hidden="true">#</a> 避免竞态条件</h3><p>在某个线程修改变量时，以原子方式执行。</p><ol><li>使用现有的线程安全类。例如 AtomicLong、AtomicInteger 等在 java.util.concurrent.atomic 包中的原子类。</li><li>对于每个包含多个变量的不变性条件，其中涉及的所有变量都需要由同一个锁来保护。</li><li>加锁【<strong>互斥锁</strong>】机制（java 内置的锁机制【同步代码块】）.</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">synchronized</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">// 访问或修改由锁保护的共享状态}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>每个 java 对象都可以用做一个实现同步的锁（可重入）。</p><h3 id="加锁约定" tabindex="-1"><a class="header-anchor" href="#加锁约定" aria-hidden="true">#</a> 加锁约定</h3><ol><li>将所有的可变状态都封装在对象内部，并通过对象的内置锁对所有访问可变状态的代码路径进行同步。</li><li>当执行时间较长的计算或者可能无法快速完成的操作时，<strong>一定不要持有锁</strong>。</li><li>尽量将</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">synchronized</span><span class="token punctuation">(</span>lock<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>控制在合理的大小。</p>`,16),l=[t];function o(c,r){return n(),e("div",null,l)}const u=a(i,[["render",o],["__file","index.html.vue"]]);export{u as default};
