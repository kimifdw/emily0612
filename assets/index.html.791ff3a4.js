import{_ as e}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as a,c as i,e as r}from"./app.59944050.js";const d={},o=r('<h1 id="防腐层" tabindex="-1"><a class="header-anchor" href="#防腐层" aria-hidden="true">#</a> 防腐层</h1><h2 id="目的" tabindex="-1"><a class="header-anchor" href="#目的" aria-hidden="true">#</a> 目的</h2><p>解决外部依赖频繁变更的情况下，如何将核心业务逻辑和外部依赖隔离</p><h2 id="domain-primitive" tabindex="-1"><a class="header-anchor" href="#domain-primitive" aria-hidden="true">#</a> Domain Primitive</h2><blockquote><p>定义。在一个特定领域里，拥有精准定义的、可自我验证的、拥有行为的 Value Object</p></blockquote><h3 id="问题分析角度" tabindex="-1"><a class="header-anchor" href="#问题分析角度" aria-hidden="true">#</a> 问题分析角度</h3><ol><li>接口的清晰度（可阅读性）</li><li>数据验证和错误处理</li><li>业务逻辑代码的清晰度</li><li>可测试性。运行每个测试用例所花费的时间*每个需求所需要增加的测试用例数量</li><li>可维护性。当依赖变化时，有多少代码需要随之改变</li><li>可扩展性。做新需求或改逻辑时，需要新增/修改多少代码</li></ol><h3 id="解决方案" tabindex="-1"><a class="header-anchor" href="#解决方案" aria-hidden="true">#</a> 解决方案</h3><ol><li>将隐性的概念显性化</li><li>将隐性的上下文显性化</li><li>封装多对象行为</li></ol><h3 id="dry-原则" tabindex="-1"><a class="header-anchor" href="#dry-原则" aria-hidden="true">#</a> DRY 原则</h3><blockquote><p>【don&#39;t repeat yourself】</p></blockquote><h3 id="single-responsibility-原则" tabindex="-1"><a class="header-anchor" href="#single-responsibility-原则" aria-hidden="true">#</a> Single Responsibility 原则</h3><blockquote><p>单一功能原则。要求一个对象/类应该只有一个变更的原因</p></blockquote><h3 id="依赖反转原则" tabindex="-1"><a class="header-anchor" href="#依赖反转原则" aria-hidden="true">#</a> 依赖反转原则</h3><blockquote><p>要求在代码中依赖抽象，而不是具体的实现</p></blockquote><h3 id="开放封闭原则" tabindex="-1"><a class="header-anchor" href="#开放封闭原则" aria-hidden="true">#</a> 开放封闭原则</h3><blockquote><p>开放扩展，封闭修改</p></blockquote><h2 id="repository模式" tabindex="-1"><a class="header-anchor" href="#repository模式" aria-hidden="true">#</a> REPOSITORY模式</h2><h3 id="数据模型-data-model" tabindex="-1"><a class="header-anchor" href="#数据模型-data-model" aria-hidden="true">#</a> 数据模型（Data Model）</h3><blockquote><p>业务数据该如何持久化，以及数据之间的关系，即传统的ER模型</p></blockquote><h3 id="业务模型-领域模型-domain-model" tabindex="-1"><a class="header-anchor" href="#业务模型-领域模型-domain-model" aria-hidden="true">#</a> 业务模型/领域模型（Domain Model）</h3><blockquote><p>业务逻辑中，相关联的数据该如何联动</p></blockquote><h3 id="模型对象规范" tabindex="-1"><a class="header-anchor" href="#模型对象规范" aria-hidden="true">#</a> 模型对象规范</h3><ol><li>Data Object（DO、数据对象）：数据库表里的物理映射</li><li>Entity(实体对象)：正常的业务模型</li><li>DTO（传输对象）：入参和出参</li><li>DTO Assembler。将1个或多个相关联的Entitiy转化为1个或多个DTO</li><li>DTO Converter。</li></ol>',24),l=[o];function h(t,n){return a(),i("div",null,l)}const u=e(d,[["render",h],["__file","index.html.vue"]]);export{u as default};
