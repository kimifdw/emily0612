import{_ as t}from"./_plugin-vue_export-helper.cdc0426e.js";import{o as c,c as d,a as e,b as o,d as i,e as r,r as a}from"./app.59944050.js";const s="/assets/history.0b599c7d.png",n="/assets/fileDemo.79fae7a0.png",h="/assets/vmstat-1.1688f2e3.png",p="/assets/pstat-w.65c4d89d.png",u="/assets/pidstat-tt-p.40ec0448.png",g={},m=r('<h2 id="常用指令" tabindex="-1"><a class="header-anchor" href="#常用指令" aria-hidden="true">#</a> 常用指令</h2><ol><li><code>history</code>。查询用户操作日志</li></ol><blockquote><p>export HISTTIMEFORMAT=&quot;%F %T <code>who -u am i 2&gt;/dev/null| awk &#39;{print $NF}&#39;|sed -e &#39;s/[()]//g&#39;</code> <code>whoami</code> &quot;</p></blockquote><p><img src="'+s+'" alt="image"></p><h2 id="文件权限与目录配置" tabindex="-1"><a class="header-anchor" href="#文件权限与目录配置" aria-hidden="true">#</a> 文件权限与目录配置</h2><ol><li><code>sudo gpasswd -a &lt;你的用户名&gt; docker</code>。将用户加入到某个组内，<strong>需重启对应的服务</strong>。需退出当前连接的用户【远程连接】</li><li>Linux 将文件可存取的身份分为三个类别，分别是<strong>owner</strong>/<strong>group</strong>/<strong>others</strong>，分别具有读、写、可执行等权限</li><li>在 Linux 中，任何一个文件都具有“User，Group 以及 Others”三种身份的个别权限</li><li>文件权限 <img src="'+n+'" alt="image"><ol><li>文件类型，即文件为补录、文件或链接等 <ol><li>目录为<strong>d</strong></li><li>文件为**-**</li></ol></li><li><code>rwx</code>。分别为读【4】、写【2】、执行【1】；没有权限为<code>-</code>，且都是针对某些账号来设计权限，其中写权限不包含删除</li><li><code>ugoa</code>。分别表示 user【u】、group【g】、others【o】和 all【a】</li><li><code>+/-</code>。分别表示+【增加权限】、-【减少权限】，只要没有指定到的项目，则该权限不会被改动</li></ol></li><li>修改权限 <ol><li><code>chgrp -R</code>。改变文件所属群组，要改变的群组名必须在<strong>etc/group</strong>文件中存在，其中<code>-R</code> 进行递归的持续变更</li><li><code>chown -R</code>。改变文件拥有者，要改变的用户名必须在<strong>etc/passwd</strong>文件中出现，其中<code>-R</code> 进行递归的持续变更；也可以使用<code>chown user.group file</code>来同时处理 user 变更和 group 变更</li><li><code>chmod</code>。改变文件的权限，可进行类似<code>chmod u=rwx,go=rx file</code>的授权</li></ol></li><li>目录权限 <ol><li><code>r</code>。具有读取目录结构清单的权限。</li><li><code>w</code>。 <ol><li>创建新的文件与目录</li><li>删除已经存在的文件与目录</li><li>将已存在的文件或目录进行更名</li><li>搬移该目录下的文件、目录位置</li></ol></li><li><code>x</code>。能否进入该目录称为工作目录的用途</li><li>至少需要开放<code>rx</code>才能让任何人进行浏览</li></ol></li><li>目录配置 <ol><li>FHS 定义三个目录用于放置数据，分别是/、/usr、/var。</li><li>对于根目录[/]，FHS 建议所在分区应越小越好，且应用程序所安装的软件最好不要与根目录放在同一个分区 <ol><li><code>/bin</code>。单人维护下还能够操作的指令。</li><li><code>boot</code>。放置开机所使用的的文件</li><li><code>/etc</code>。获取配置文件</li><li><code>/lib</code>。系统的函数库</li><li><code>/opt</code>。给第三方协力软件放置的目录</li><li><code>/srv</code>。一些网络服务启动之后，这些服务需要取用的网络数据目录</li><li><code>/tmp</code>。一般使用者主键表</li></ol></li></ol></li></ol><h2 id="tcp-相关" tabindex="-1"><a class="header-anchor" href="#tcp-相关" aria-hidden="true">#</a> TCP 相关</h2><ol><li><code>/proc/sys/net/ipv4/tcp_wmem</code>。发送缓冲区，三个值分别代表最小值，默认值，最大值</li><li><code>/proc/sys/net/ipv4/tcp_rmem</code>。接收缓冲区，三个值分别代表最小值，默认值，最大值</li><li><code>ip addr show ens33 | grep inet | awk &#39;{ print $2; }&#39; | sed &#39;s/\\/.*$//&#39;</code>。查看 ip addr 的地址</li></ol><h3 id="curl" tabindex="-1"><a class="header-anchor" href="#curl" aria-hidden="true">#</a> curl</h3><ol><li><code>curl -o /dev/null -s -w &quot;time_connect: %{time_connect}\\n time_start transfer: %{time_starttransfer}\\n time_nslookup:%{time_namelookup}\\n time_total: %{time_total}\\n&quot; &quot;https://jdznjjtest.auxgroup.com/app/errorcode&quot;</code>。</li></ol><h2 id="查看防火墙" tabindex="-1"><a class="header-anchor" href="#查看防火墙" aria-hidden="true">#</a> 查看防火墙</h2><ol><li><code>sudo ufw app list</code>。查看防火墙允许的应用列表</li></ol><h2 id="内存分析" tabindex="-1"><a class="header-anchor" href="#内存分析" aria-hidden="true">#</a> 内存分析</h2><h3 id="pstree" tabindex="-1"><a class="header-anchor" href="#pstree" aria-hidden="true">#</a> pstree</h3><blockquote><p>线程与同一个进程内的其他线程共享同一块内存的一个特殊进程，都有自己的 pid</p></blockquote><ol><li><code>pstree</code>：将进程以树状展示</li><li><code>pstree -p</code>：看到对应系统中的每个进程的使用线程数</li><li><code>pstree -p pid</code>：某个进程的线程情况</li></ol><h3 id="vmstat" tabindex="-1"><a class="header-anchor" href="#vmstat" aria-hidden="true">#</a> vmstat</h3><blockquote><p>对操作系统整体的虚拟内存、进程、CPU 活动进行监控</p></blockquote><ol><li><p><code>vmstat &lt;时间间隔&gt; &lt;采集次数&gt;</code><img src="'+h+'" alt="image"></p></li><li><p>参数说明</p><ol><li><code>procs</code><ol><li>r。运行和等待 CPU 时间片的进程数</li><li>b。阻塞的进程数</li></ol></li><li><code>Memory</code><ol><li>swpd。虚拟内存使用情况</li><li>free。当前空闲的物理内存</li><li>buff。缓存的内存大小</li><li>Cache。缓存的内存大小</li></ol></li><li><code>Swap</code><ol><li>si。有磁盘读入内存大小</li><li>so。由内存写入磁盘大小</li></ol></li><li><code>IO</code><ol><li>bi。由块设备读入数据的总量</li><li>bo。写到块设备数据的总量</li></ol></li><li><code>System</code><ol><li>in。每秒中断数</li><li>cs。每秒产生的上下文切换次数【线程切换】</li></ol></li><li><code>CPU</code><ol><li>us。用户进程消耗的 CPU 时间百分比</li><li>sy。系统调用消耗的 CPU 时间百分比</li><li>id。CPU 处在空间状态的时间百分比</li><li>wa。等待 IO 的 CPU 时间</li></ol></li></ol></li><li><h3 id="pidstat" tabindex="-1"><a class="header-anchor" href="#pidstat" aria-hidden="true">#</a> pidstat</h3><blockquote><p>用来监控全部或指定进程的 cpu、内存、线程、设备 IO 等系统资源的占用情况</p></blockquote></li><li><p><code>pidstat -w &lt;时间间隔&gt;</code><img src="'+p+'" alt="image"></p></li><li><p>参数说明</p><ol><li>cswch/s。每秒主动任务上下文切换数量。</li><li>nvcswch/s。每秒被动任务上下文切换数量。</li></ol></li><li><p><code>pidstat -tt -p &lt;pid&gt;</code><img src="'+u+'" alt="image"></p></li><li><p>参数表示</p><ol><li>TGID。主线程</li><li>TID。线程 id</li><li>%usr。进程在用户空间占用 CPU 的百分比</li><li>%system。进程在内核空间占用 CPU 的百分比</li><li>%guest。进程在虚拟机占用 CPU 的百分比</li><li>CPU。处理进程的 CPU 编号</li></ol></li></ol><h2 id="建议" tabindex="-1"><a class="header-anchor" href="#建议" aria-hidden="true">#</a> 建议</h2><ol><li>尽量不要使用 root 直接登录系统，应使用一般账号登录系统，有需要再转换身份</li></ol><h2 id="资料" tabindex="-1"><a class="header-anchor" href="#资料" aria-hidden="true">#</a> 资料</h2>',22),_={href:"https://blog.csdn.net/weifangan/article/details/80741981",target:"_blank",rel:"noopener noreferrer"},f={href:"https://curl.se/docs/manpage.html",target:"_blank",rel:"noopener noreferrer"},b={href:"https://curl.github.io/curl-cheat-sheet/http-sheet.html",target:"_blank",rel:"noopener noreferrer"};function x(w,k){const l=a("ExternalLinkIcon");return c(),d("div",null,[m,e("ol",null,[e("li",null,[e("a",_,[o("CURL -w 参数详解"),i(l)])]),e("li",null,[e("a",f,[o("curl官方说明书"),i(l)])]),e("li",null,[e("a",b,[o("curl-cheat-sheet"),i(l)])])])])}const q=t(g,[["render",x],["__file","index.html.vue"]]);export{q as default};
